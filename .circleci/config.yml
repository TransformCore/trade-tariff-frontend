version: 2.1

orbs:
  ruby: circleci/ruby@1.1.2
  node: circleci/node@2
  browser-tools: circleci/browser-tools@1.1
  cloudfoundry: circleci/cloudfoundry@1.0

jobs:
  build:
    docker:
      - image: cimg/ruby:2.7-node
      - image: redis
    resource_class: medium
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
  checking:
    docker:
      - image: 'cimg/ruby:2.7-node'
    resource_class: small
    steps:
      - checkout
      - ruby/install-deps
      - ruby/rubocop-check:
          format: progress
          label: Inspecting with Rubocop
  test:
    docker:
      - image: cimg/ruby:2.7-node
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: test
    resource_class: medium
    steps:
      - browser-tools/install-browser-tools
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      - ruby/rspec-test
      - store_artifacts:
          path: coverage
  deploy:
    parameters:
      space:
        type: string
      domain_prefix:
        type: string
    docker:
      - image: cimg/ruby:2.7-node
    steps:
      - checkout
      - run:
          name: "Setup CF CLI"
          command: |
            curl -L -o cf.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=7.2.0&source=github-rel'
            sudo dpkg -i cf.deb
            cf -v
            cf api "$CF_ENDPOINT"
            cf auth "$CF_USER" "$CF_PASSWORD"
            cf add-plugin-repo CF-Community https://plugins.cloudfoundry.org
            cf install-plugin app-autoscaler-plugin -r CF-Community -f
            cf target -o "$CF_ORG" -s "<< parameters.space >>"
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "$CF_APP" -p deploy_manifest.yml
      - run:
          name: "Push new app in dark mode"
          command: |
            # Push as "dark" instance
            cf push "$CF_APP-dark" -f deploy_manifest.yml --no-route

            # Map dark route
            cf map-route  "$CF_APP-dark" london.cloudapps.digital -n "$CF_APP-dark"

            # Attach precreated autoscaling policy
            cf attach-autoscaling-policy "$CF_APP-dark" config/autoscaling/<< parameters.space >>-policy.json

            # Enable routing from this frontend to backend applications which are private
            cf add-network-policy "$CF_APP-dark" "$CF_BACKEND_APP_XI" --protocol tcp --port 8080
            cf add-network-policy "$CF_APP-dark" "$CF_BACKEND_APP_UK"  --protocol tcp --port 8080
      - run:
          name: "Verify new version is working on dark URL."
          command: |
            sleep 15
            # TODO: Retry
            # Verify new version is working on dark URL.
            HTTPCODE=`curl -s -o /dev/null -w "%{http_code}" https://$CF_APP-dark.london.cloudapps.digital/healthcheck`
            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route not available, failing deploy ($HTTPCODE)"
              exit 1
            fi
      - run:
          name: "Switch dark app to live"
          command: |
            # Send "real" url to new version
            cf unmap-route "$CF_APP-dark" london.cloudapps.digital -n "$CF_APP-dark"
            cf map-route  "$CF_APP-dark" london.cloudapps.digital -n "$CF_APP"
            cf map-route  "$CF_APP-dark" "<< parameters.domain_prefix >>".trade-tariff.service.gov.uk
            cf map-route  "$CF_APP-dark" assets-<< parameters.domain_prefix >>.trade-tariff.service.gov.uk

            # Stop sending traffic to previous version
            cf unmap-route  "$CF_APP" london.cloudapps.digital -n "$CF_APP"

            # stop previous version
            cf stop "$CF_APP"

            # delete previous version
            cf delete "$CF_APP" -f

            # Switch name of "dark" version to claim correct name
            cf rename "$CF_APP-dark" "$CF_APP"
workflows:
  version: 2
  build_and_test:
    jobs:
      - checking
      - test
      - build:
          filters:
            branches:
              only:
                - master
          requires:
            - test
      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - build
          space: "development"
          domain_prefix: "dev"
